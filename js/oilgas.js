
//require modules that will be needed in this application.  Beware that for newer versions of the ESRI Javascript API, a different design pattern is used called AMD (Asynchronous Module Definition)
dojo.require("dijit.layout.BorderContainer");
dojo.require("dijit.layout.ContentPane");
dojo.require("esri.map");
dojo.require("esri.layers.FeatureLayer");
dojo.require("dijit.Menu");
dojo.require("esri.dijit.Geocoder");
dojo.require("esri.dijit.Legend");
dojo.require("esri.dijit.InfoWindow");
dojo.require("dijit.layout.TabContainer");

// Yes, I like global variables.
var map; //map object
var featureLayer; //will contain esri agol feature class data
var template; //will contain information for setting up on-click infowindow
var legend;  //will contain legend widget
var cp2; //will contain RGraph chart


//beginning function called when application is loaded
function init() {

  //RGraph Chart will go into here
	cp2 = new dijit.layout.ContentPane({
		title : "Chart"
	});

  //select and input elements will be uniform.js elements (and styled accordingly)
	$("select, input").uniform();
  
  //main map object with standard presets.  
  //more options for basemaps at https://developers.arcgis.com/javascript/jsapi/esri.basemaps-amd.html
  //center is any longitude, latitude pair
  //zoom is an integer.  zoom levels typically correspond to mapscales here: http://blogs.esri.com/esri/arcgis/2009/03/19/how-can-you-tell-what-map-scales-are-shown-for-online-maps/
	map = new esri.Map("mapDiv", {
		basemap : "topo",
		center : [-105.8, 39],
		zoom : 7
	});
  
  //after map is fully loaded, call initOperationLayer for further map customization
	dojo.connect(map, "onLoad", initOperationalLayer);
  
  //set main title in header bar
	dojo.byId("title").innerHTML = "Oil Production";
  
  //set subtitle in header bar
	dojo.byId("subtitle").innerHTML = "Data: Colorado Oil and Gas Conservation Commission";
  
}

function initOperationalLayer(map) {
  
  //when "map.addLayers();" is called, this routine adds map layers to legend
  //note, this will not be called when 'addLayer' (no plural) is called - that way those layers dont end up in legend
	dojo.connect(map, 'onLayersAddResult', function(results) {
		var layerInfo = dojo.map(results, function(layer, index) {
			return {
				layer : layer.layer
			};
		});
		if (layerInfo.length > 0) {
			legend = new esri.dijit.Legend({
				map : map,
				layerInfos : layerInfo
			}, "legendDiv");
			legend.startup();
		}
	});
  
  
  //declare & setup geocoder
	var Geocoder = new esri.dijit.Geocoder({
		autoComplete : true,
		arcgisGeocoder : {
			placeholder : "Find a place",
			sourceCountry : 'USA'
		},
		map : map
	}, dojo.byId("search"));

  
	//add geocoder to map
	Geocoder.startup();

  
  //uses JQuery UI to make legend window draggable
	$("#legendDiv").draggable({
		containment : "#mapDiv"
	});

  
  //finds the value of the 'year' dropdown
	var select1 = $('#speed').val();
	var select1int = parseInt(select1);

  //sets up infowindow template
	template = new esri.InfoTemplate();
	template.setTitle("${NAMELSAD10}");  //title for infowindow is equal to field in feature service named 'NAMELSAD10'
	template.setContent(getWindowContent);  //content for infowindow will be generated by the 'getWindowContent' function
  
  
  //featureLayer: the feature service address in ArcGIS Online where all your data is stored
  //initialized with 'template' which determines what the popup will look like when this feature layer is clicked on the map
	featureLayer = new esri.layers.FeatureLayer("http://services.arcgis.com/IamIM3RJ5xHykalK/arcgis/rest/services/OilGasAll/FeatureServer/0", {
		mode : esri.layers.FeatureLayer.MODE_ONDEMAND,
		outFields : ["*"],
		infoTemplate : template
	});

  //labelLayer is what shows Labels for each County.  I think this functionality might be built in to future versions of the ESRI Javascript API
	labelLayer = new esri.layers.FeatureLayer("http://services.arcgis.com/IamIM3RJ5xHykalK/arcgis/rest/services/County/FeatureServer/0", {
		mode : esri.layers.FeatureLayer.MODE_ONDEMAND,
		outFields : ["*"]
	});

  //adds featureLayer (data layer) to map
	map.addLayers([featureLayer]);

  //presets default infowindow size
	map.infoWindow.resize(360, 270);

  //creates a symbol style
	var defaultSymbol3 = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([0, 0, 0]), 0.5), new dojo.Color([0, 0, 0, 1]));
	;
  
  //assign symbol style to a renderer
	var renderer3 = new esri.renderer.SimpleRenderer(defaultSymbol3);

  //to keep labels crisp, turn off AutoGeneralize
	labelLayer.setAutoGeneralize(false);
  
  //style everything in the labelLayer with this renderer
	labelLayer.setRenderer(renderer3);
  
  //add the labelLayer to the map
	map.addLayer(labelLayer);

  //adds my own custom Colorado Flag and link to the lower right corner of the map
	esri.config.defaults.map.logoLink = "http://dola.colorado.gov/";
	document.getElementsByClassName('logo-med')[0].style.backgroundImage = "url(\"http://dola.colorado.gov/gis-cms/sites/default/files/gis-images/CO_LOGO.png\")";
	document.getElementsByClassName('logo-med')[0].style.backgroundRepeat = "no-repeat";

  
  //can hide the loading animation now that most of the setup has been completed
  //waits one second.  hides loading animation
  //then calls midFunction() where map features will be appropriately colored
	$('#loading').hide(1000, midFunction);

}



//looks scary, but all it does is create a string from a number, and adds commas where logical
function commafy(nStr) {
	var x, x1, x2, rgx; 	nStr += ''; 	x = nStr.split('.'); 	x1 = x[0]; 	x2 = x.length > 1 ? '.' + x[1] : ''; 	rgx = /(\d+)(\d{3})/; 	
  while (rgx.test(x1)) { 		x1 = x1.replace(rgx, '$1' + ',' + '$2');	}
	return x1 + x2;
}



function getWindowContent(graphic) {
   //graphic is the feature that was clicked on.   graphic.attributes are all the data for that feature. (in the AGOL feature service)
  
  
  //function to create chart.  sends county fips code.
	querychart(graphic.attributes.COUNTYFP10);

  //gets value of year from dropdown
	var select1 = $('#speed').val();
	var select1int = parseInt(select1);
  
  //determines what 'statistic' is chosen in the dropdown
	var scale = $('#radinput').val();

  //all statistics are shown, but the selected statistic is shown in bold
	var bold1a = "";	var bold1b = "";	var bold2a = "";	var bold2b = "";	var bold3a = ""; var bold3b = "";	var bold4a = "";	var bold4b = "";  
  
	if (scale == "1") {
		bold1a = "<b>";
		bold1b = "</b>";
	}
	if (scale == "2") {
		bold2a = "<b>";
		bold2b = "</b>";
	}
	if (scale == "3") {
		bold3a = "<b>";
		bold3b = "</b>";
	}
	if (scale == "4") {
		bold4a = "<b>";
		bold4b = "</b>";
	}

  //gets specific data from clicked feature.  for instance, if year (select1int) is 1999, the data for the variable OIL1999 is retrieved with graphic.attributes.OIL1999 (or graphic.attributes.OIL + select1int)
  //these are set up as strings, but eval(ed) into values in 'result' string declaration
	var oilvar = ('graphic.attributes.OIL' + select1int);
	var gasvar = ('graphic.attributes.GAS' + select1int);
	var covar = ('graphic.attributes.CO' + select1int);
	var wellsvar = ('graphic.attributes.WELLS' + select1int);

  //this will show up in the infowindow as the content of the first tab
	var result = "<br /><br /><table id='rounded-corner'>" + "<tr><td>Year:</td><td style='text-align:right'>" + select1int + "</td><td></td></tr>" + "<tr></tr>" + "<tr><td></td><td></td><td></td></tr><tr></tr>" + "<tr><td>" + bold1a + "Oil Production:" + bold1b + "</td><td style='text-align:right'><i>" + bold1a + commafy(eval(oilvar)) + bold1b + "</i></td><td style='text-align:right'>" + bold1a + "&nbsp;&nbsp;Barrels" + bold1b + "</td></tr>" + "<tr><td>" + bold2a + "Natural Gas Production:" + bold2b + "</td><td style='text-align:right'><i>" + bold2a + commafy(eval(gasvar)) + bold2b + "</i></td><td style='text-align:right'>" + bold2a + "&nbsp;&nbsp;MCF" + bold2b + "</td></tr>" + "<tr><td>" + bold3a + "CO2 Production:" + bold3b + "</td><td style='text-align:right'><i>" + bold3a + commafy(eval(covar)) + bold3b + "</i></td><td style='text-align:right'>" + bold3a + "&nbsp;&nbsp;MCF" + bold3b + "</td></tr>" + "<tr><td>" + bold4a + "Number of Wells:" + bold4b + "&nbsp;&nbsp;&nbsp;&nbsp;</td><td style='text-align:right'><i>" + bold4a + commafy((eval(wellsvar)).toFixed(0)) + bold4b + "</i></td><td style='text-align:right'>" + bold4a + "&nbsp;&nbsp;Wells" + bold4b + "</td></tr>" + "</table>";

	//make a tab container
	var tc = new dijit.layout.TabContainer({
		style : "width:100%;height:100%;"
	}, dojo.create("div"));

	//creates the first tab (content pane)
	var cp1 = new dijit.layout.ContentPane({
		title : "Details",
		content : result
	});

  //clears the chart canvas and prepares for chart to be loaded back into canvas
	RGraph.ObjectRegistry.Clear(document.getElementById('cvs'));
	RGraph.Clear(document.getElementById('cvs'));

	tc.addChild(cp1); //adds first tab (with content created above) and adds to tab container
	tc.addChild(cp2); //adds second tab (created in beginning of init function).  chart will be added asynchronously

	return tc.domNode;  //returns this entire popup object
}


//when a dropdown DOM element is changed, this function is called
function midFunction() {

  var theempest1;  //create string representation of variable+year combination
  var renderer;   //This will style features based upon the value of 'theempest1' declared above.
  
  //remove 'focus' styling after dropdown option clicked
	$('#uniform-speed').removeClass('focus');
	$('#uniform-radinput').removeClass('focus');

	//make loading animation visible
	$('#loading').show(100);

  //if a popup is currently open, close it
	map.infoWindow.hide();

  //find the statistic that is currently selected
	var scale = $('#radinput').val();

  //gets value of year from dropdown  
	var select1 = $('#speed').val();
	var select1int = parseInt(select1);  
  
	if (scale == "1") {//oil production

    //changes title and subtitle to accurately reflect currently selected statistic
		dojo.byId("title").innerHTML = "Oil Production";
		dojo.byId("subtitle").innerHTML = "Data: Colorado Oil and Gas Conservation Commission";

    //create string representation of variable+year combination
  	theempest1 = ('graphic.attributes.OIL' + select1int);

		//Oil Production renderer.  This will style features based upon the value of 'theempest1' declared above
    //renderer consists of a variable that will be compared against a series of data breaks
    
    //variable to be compared results from this function (the eval-ed result of theempest1 string variable).
		renderer = new esri.renderer.ClassBreaksRenderer(false, function(graphic) {
			return eval(theempest1);
		});
    //this adds a break from negative infinity to 1.  If a feature value falls within that range, then it will be painted with the styles and colors listed (in 'symbol').
    //the 'label' will be added to the legend
		renderer.addBreak({
			minValue : -Infinity,
			maxValue : 1,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([255, 255, 128, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "No Production"
		});
		renderer.addBreak({
			minValue : 1,
			maxValue : 20000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([252, 221, 93, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "Less than 20,000"
		});
		renderer.addBreak({
			minValue : 20000,
			maxValue : 50000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([247, 186, 62, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "20,001 to 50,000"
		});
		renderer.addBreak({
			minValue : 50000,
			maxValue : 200000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([214, 133, 34, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "50,001 to 200,000"
		});
		renderer.addBreak({
			minValue : 200000,
			maxValue : 2000000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([158, 68, 16, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "200,001 to 2,000,000"
		});
		renderer.addBreak({
			minValue : 2000000,
			maxValue : Infinity,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([107, 6, 1, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "2,000,000+"
		});

    //assigns this renderer to the feature layer
		featureLayer.setRenderer(renderer);
    //redraws-refreshes layer. possible one or none of these statements are needed
		featureLayer.redraw();
		legend.refresh();

    //prepends the following text to the legend (as a sort of title)
		$('#legendDiv').prepend('<center><h3>Oil Production (Barrels)<h3></center>');
	}

	if (scale == "2") { //natural gas

    //changes title and subtitle to accurately reflect currently selected statistic    
		dojo.byId("title").innerHTML = "Natural Gas Production";
		dojo.byId("subtitle").innerHTML = "Data: Colorado Oil and Gas Conservation Commission";

    //create string representation of variable+year combination    
		theempest1 = ('graphic.attributes.GAS' + select1int);

		//Gas Production This will style features based upon the value of 'theempest1' declared above
    //renderer consists of a variable that will be compared against a series of data breaks
    
    //variable to be compared results from this function (the eval-ed result of theempest1 string variable).
		renderer = new esri.renderer.ClassBreaksRenderer(false, function(graphic) {
			return eval(theempest1);
		});
    //this adds a break from negative infinity to 1.  If a feature value falls within that range, then it will be painted with the styles and colors listed (in 'symbol').
    //the 'label' will be added to the legend
		renderer.addBreak({
			minValue : -Infinity,
			maxValue : 1,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([255, 255, 128, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "No Production"
		});
		renderer.addBreak({
			minValue : 1,
			maxValue : 100000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([252, 221, 93, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "Less than 100,000"
		});
		renderer.addBreak({
			minValue : 100001,
			maxValue : 1000000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([247, 186, 62, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "100,001 to 1,000,000"
		});
		renderer.addBreak({
			minValue : 1000001,
			maxValue : 100000000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([214, 133, 34, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "1,000,001 to 10,000,000"
		});
		renderer.addBreak({
			minValue : 10000001,
			maxValue : 100000000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([158, 68, 16, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "10,000,001 to 100,000,000"
		});
		renderer.addBreak({
			minValue : 100000001,
			maxValue : Infinity,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([107, 6, 1, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "100,000,000+"
		});
    
    //assigns this renderer to the feature layer
		featureLayer.setRenderer(renderer);
    //redraws-refreshes layer. possible one or none of these statements are needed
		featureLayer.redraw();
		legend.refresh();

    //prepends the following text to the legend (as a sort of title)
		$('#legendDiv').prepend('<center><h3>Natural Gas Production (MCF)<h3></center>');

	}

	if (scale == "3") {//co2 production

    //changes title and subtitle to accurately reflect currently selected statistic
		dojo.byId("title").innerHTML = "CO2 Production";
		dojo.byId("subtitle").innerHTML = "Data: Colorado Oil and Gas Conservation Commission";

    //create string representation of variable+year combination
		theempest1 = ('graphic.attributes.CO' + select1int);

		//CO2 Production.  This will style features based upon the value of 'theempest1' declared above
    //renderer consists of a variable that will be compared against a series of data breaks
    
    //variable to be compared results from this function (the eval-ed result of theempest1 string variable).
		renderer = new esri.renderer.ClassBreaksRenderer(false, function(graphic) {
			return eval(theempest1);
		});
    //this adds a break from negative infinity to 1.  If a feature value falls within that range, then it will be painted with the styles and colors listed (in 'symbol').
    //the 'label' will be added to the legend
		renderer.addBreak({
			minValue : -Infinity,
			maxValue : 1,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([255, 255, 128, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "No Production"
		});
		renderer.addBreak({
			minValue : 1,
			maxValue : 100000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([252, 221, 93, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "1 to 100,000"
		});
		renderer.addBreak({
			minValue : 100001,
			maxValue : 1000000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([247, 186, 62, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "100,001 to 1,000,000"
		});
		renderer.addBreak({
			minValue : 1000001,
			maxValue : 10000000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([214, 133, 34, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "1,000,001 to 10,000,000"
		});
		renderer.addBreak({
			minValue : 10000001,
			maxValue : 100000000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([158, 68, 16, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "10,000,001 to 100,000,000"
		});
		renderer.addBreak({
			minValue : 100000001,
			maxValue : Infinity,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([107, 6, 1, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "> 100,000,000"
		});
    
    //assigns this renderer to the feature layer
		featureLayer.setRenderer(renderer);
    //redraws-refreshes layer. possible one or none of these statements are needed
		featureLayer.redraw();
		legend.refresh();

    //prepends the following text to the legend (as a sort of title)
		$('#legendDiv').prepend('<center><h3>CO2 Production (MCF)<h3></center>');

	}
	if (scale == "4") { //number of active wells

    //changes title and subtitle to accurately reflect currently selected statistic
		dojo.byId("title").innerHTML = "Number of Active Wells";
		dojo.byId("subtitle").innerHTML = "Data: Colorado Oil and Gas Conservation Commission";

    //create string representation of variable+year combination
		theempest1 = ('graphic.attributes.WELLS' + select1int);
  
    
		//Number of Wells.  This will style features based upon the value of 'theempest1' declared above
    //renderer consists of a variable that will be compared against a series of data breaks
    
    //variable to be compared results from this function (the eval-ed result of theempest1 string variable).
		renderer = new esri.renderer.ClassBreaksRenderer(false, function(graphic) {
			return eval(theempest1);
		});
    //this adds a break from negative infinity to 0.5.  If a feature value falls within that range, then it will be painted with the styles and colors listed (in 'symbol').
    //the 'label' will be added to the legend
		renderer.addBreak({
			minValue : -Infinity,
			maxValue : 0.5,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([255, 255, 128, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "No Wells"
		});
		renderer.addBreak({
			minValue : 0.5,
			maxValue : 10,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([252, 221, 93, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "1 to 10"
		});
		renderer.addBreak({
			minValue : 10,
			maxValue : 100,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([247, 186, 62, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "11 to 100"
		});
		renderer.addBreak({
			minValue : 100,
			maxValue : 1000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([214, 133, 34, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "101 to 1,000"
		});
		renderer.addBreak({
			minValue : 1000,
			maxValue : 10000,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([158, 68, 16, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "1,001 to 10,000"
		});
		renderer.addBreak({
			minValue : 10000,
			maxValue : Infinity,
			symbol : new esri.symbol.SimpleFillSymbol().setColor(new dojo.Color([107, 6, 1, 0.5])).setOutline(new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([100, 100, 100]), 1)),
			label : "> 10,000"
		});

    //assigns this renderer to the feature layer
		featureLayer.setRenderer(renderer);
    //redraws-refreshes layer. possible one or none of these statements are needed
		featureLayer.redraw();
		legend.refresh();

    //prepends the following text to the legend (as a sort of title)
		$('#legendDiv').prepend('<center><h3>Number of Wells<h3></center>');

	}

	//Hide loading animation
	$('#loading').hide(100);
}



//chart creating function.  will query feature layer for a series of values.  create a chart.  add the chart to a content pane (tab)
function querychart(countyfips) {

	var datastore = [];  //chart values pushed to this array

  
	var query = new esri.tasks.Query();
	query.where = "COUNTYFP10 = '" + countyfips + "'"; //filter by county
	query.returnGeometry = false;  //looking for data, no geo


	var items;

  //choose our main shapefile as the featureLayer of interest
	featureLayer2 = new esri.layers.FeatureLayer("http://services.arcgis.com/IamIM3RJ5xHykalK/arcgis/rest/services/OilGasAll/FeatureServer/0", {
		outFields : ["*"]
	});
  
  //choose features that match our query string, add them to the variable 'items'
	dojo.connect(featureLayer2, "onLoad", function() {
		featureLayer2.queryFeatures(query, function(featureSet) {
			items = dojo.map(featureSet.features, function(feature) {
				return feature.attributes;
			});

      
      //determine the statistic of interest
			var scale = $('#radinput').val();
      
			var units = '';  //units label

      //if oil production is chosen, then push all the oilproduction values into datastore
			if (scale == "1") {//oil production
				datastore.push(items[0].OIL1999);
				datastore.push(items[0].OIL2000);
				datastore.push(items[0].OIL2001);
				datastore.push(items[0].OIL2002);
				datastore.push(items[0].OIL2003);
				datastore.push(items[0].OIL2004);
				datastore.push(items[0].OIL2005);
				datastore.push(items[0].OIL2006);
				datastore.push(items[0].OIL2007);
				datastore.push(items[0].OIL2008);
				datastore.push(items[0].OIL2009);
				datastore.push(items[0].OIL2010);
				datastore.push(items[0].OIL2011);
				datastore.push(items[0].OIL2012);
				units = ' (Barrels)';
			}
      
      //if natural gas production is chosen, then push all the oilproduction values into datastore
			if (scale == "2") {//natural gas production
				datastore.push(items[0].GAS1999);
				datastore.push(items[0].GAS2000);
				datastore.push(items[0].GAS2001);
				datastore.push(items[0].GAS2002);
				datastore.push(items[0].GAS2003);
				datastore.push(items[0].GAS2004);
				datastore.push(items[0].GAS2005);
				datastore.push(items[0].GAS2006);
				datastore.push(items[0].GAS2007);
				datastore.push(items[0].GAS2008);
				datastore.push(items[0].GAS2009);
				datastore.push(items[0].GAS2010);
				datastore.push(items[0].GAS2011);
				datastore.push(items[0].GAS2012);
				units = ' (MCF)';
			}

      //if co2 production is chosen, then push all the oilproduction values into datastore      
			if (scale == "3") {//co2 production
				datastore.push(items[0].CO1999);
				datastore.push(items[0].CO2000);
				datastore.push(items[0].CO2001);
				datastore.push(items[0].CO2002);
				datastore.push(items[0].CO2003);
				datastore.push(items[0].CO2004);
				datastore.push(items[0].CO2005);
				datastore.push(items[0].CO2006);
				datastore.push(items[0].CO2007);
				datastore.push(items[0].CO2008);
				datastore.push(items[0].CO2009);
				datastore.push(items[0].CO2010);
				datastore.push(items[0].CO2011);
				datastore.push(items[0].CO2012);
				units = ' (MCF)';
			}

      //if number of active wells production is chosen, then push all the oilproduction values into datastore          
			if (scale == "4") {//number of active wells
				datastore.push(items[0].WELLS1999);
				datastore.push(items[0].WELLS2000);
				datastore.push(items[0].WELLS2001);
				datastore.push(items[0].WELLS2002);
				datastore.push(items[0].WELLS2003);
				datastore.push(items[0].WELLS2004);
				datastore.push(items[0].WELLS2005);
				datastore.push(items[0].WELLS2006);
				datastore.push(items[0].WELLS2007);
				datastore.push(items[0].WELLS2008);
				datastore.push(items[0].WELLS2009);
				datastore.push(items[0].WELLS2010);
				datastore.push(items[0].WELLS2011);
				datastore.push(items[0].WELLS2012);
				units = '';
			}


      //clone datastore array (sorteddatastore will be used to find min and max values)
			var sorteddatastore = datastore.slice(0);

      //sort values low to high
			sorteddatastore.sort(function(a, b) {
				return a - b;
			});

      //find an appropriate chart floor value
			var floorval = 1;
			if (sorteddatastore[0] > 10) {
				floorval = 1;
			}
			if (sorteddatastore[0] > 100) {
				floorval = 10;
			}
			if (sorteddatastore[0] > 1000) {
				floorval = 100;
			}
			if (sorteddatastore[0] > 10000) {
				floorval = 1000;
			}
			if (sorteddatastore[0] > 100000) {
				floorval = 10000;
			}
			if (sorteddatastore[0] > 1000000) {
				floorval = 100000;
			}

      //find an appropriate chart ceiling value
			var ceilval = 1;
			if ((sorteddatastore[sorteddatastore.length - 1]) > 10) {
				ceilval = 1;
			}
			if ((sorteddatastore[sorteddatastore.length - 1]) > 100) {
				ceilval = 10;
			}
			if ((sorteddatastore[sorteddatastore.length - 1]) > 1000) {
				ceilval = 100;
			}
			if ((sorteddatastore[sorteddatastore.length - 1]) > 10000) {
				ceilval = 1000;
			}
			if ((sorteddatastore[sorteddatastore.length - 1]) > 100000) {
				ceilval = 10000;
			}
			if ((sorteddatastore[sorteddatastore.length - 1]) > 1000000) {
				ceilval = 100000;
			}

      //use the length of the number to determine an appropriate left margin width
			var lgutter = 32;
			if (sorteddatastore[sorteddatastore.length - 1] > 10000) {
				lgutter = 40;
			}
			if (sorteddatastore[sorteddatastore.length - 1] > 100000) {
				lgutter = 47;
			}
			if (sorteddatastore[sorteddatastore.length - 1] > 1000000) {
				lgutter = 54;
			}
			if (sorteddatastore[sorteddatastore.length - 1] > 10000000) {
				lgutter = 61;
			}
			if (sorteddatastore[sorteddatastore.length - 1] > 100000000) {
				lgutter = 68;
			}

      //call chart creation tool (RGraph library) with appropriate presets
			var line3 = new RGraph.Line('cvs', datastore).Set('gutter.right', 7).Set('gutter.left', lgutter).Set('gutter.bottom', 25).Set('gutter.top', 30).Set('labels', ["99", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]).Set('tooltips', [commafy(String((datastore[0]).toFixed(0))), commafy(String((datastore[1]).toFixed(0))), commafy(String((datastore[2]).toFixed(0))), commafy(String((datastore[3]).toFixed(0))), commafy(String((datastore[4]).toFixed(0))), commafy(String((datastore[5]).toFixed(0))), commafy(String((datastore[6]).toFixed(0))), commafy(String((datastore[7]).toFixed(0))), commafy(String((datastore[8]).toFixed(0))), commafy(String((datastore[9]).toFixed(0))), commafy(String((datastore[10]).toFixed(0))), commafy(String((datastore[11]).toFixed(0))), commafy(String((datastore[12]).toFixed(0))), commafy(String((datastore[13]).toFixed(0)))]).Set('title', dojo.byId("title").innerHTML + units).Set('text.size', 8).Set('linewidth', 2).Set('tickmarks', 'circle').Set('xaxispos', 'bottom').Set('numxticks', 13).Set('numyticks', 5).Set('chart.ymin', (Math.floor(sorteddatastore[0] / floorval) * floorval)).Set('chart.ymax', (Math.ceil(sorteddatastore[sorteddatastore.length - 1] / ceilval) * ceilval)).Set('shadow', true).Set('background.grid.autofit.numvlines', 13).Set('colors', ['blue']).Draw();

      //copy canvascontainer onto tab (content pane)
			$('#' + cp2.id).html(document.getElementById('canvascontainer'));

      //add attribution
			$('#pos_ab').html('Chart: <a href="http://www.rgraph.net" target="_blank">RGraph</a>');

		});
	});

}


//function creates a unique id to refer to the created image
function makeid() {
	var text = "";
	var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	for (var i = 0; i < 5; i++)
		text += possible.charAt(Math.floor(Math.random() * possible.length));
	return text;
}

//sends data to Server PHP code which sends it to PhantomJS.  You won't need this.  I'm guessing ESRI Javascript Print functionality has improved leaps and bounds since I last tried it.
function Clickhereformap(mainid) {

	//new ({ wkid: 4326});
	//old ({ wkid: 102100});
	var oldx = (map.extent.xmin + map.extent.xmax) / 2;
	var oldy = (map.extent.ymin + map.extent.ymax) / 2;

	//function convert spatial ref 102100 to spatial ref 4326
	var x = oldx;
	var y = oldy;
	var num3 = x / 6378137.0;
	var num4 = num3 * 57.295779513082323;
	var num5 = Math.floor(((num4 + 180.0) / 360.0));
	var num6 = num4 - (num5 * 360.0);
	var num7 = 1.5707963267948966 - (2.0 * Math.atan(Math.exp((-1.0 * y) / 6378137.0)));
	var newx = num6;
	var newy = num7 * 57.295779513082323;

	var sendtitle;

	if ($('#radinput').val() == '1') {
		sendtitle = 'Oil Production, ' + $('#speed').val();
	}
	if ($('#radinput').val() == '2') {
		sendtitle = 'Natural Gas Production, ' + $('#speed').val();
	}
	if ($('#radinput').val() == '3') {
		sendtitle = 'CO2 Production, ' + $('#speed').val();
	}
	if ($('#radinput').val() == '4') {
		sendtitle = 'Number of Active Wells, ' + $('#speed').val();
	}

	var sendsubtitle = 'Data: Colorado Oil and Gas Conservation Commission';

	var newobj = new Object();
	newobj.zoom = map.getZoom();
	newobj.filename = "http://dola.colorado.gov/gis-php/phantomOILGAS.html";
	newobj.lat = newy;
	newobj.lng = newx;
	newobj.title = encodeURIComponent(sendtitle);
	newobj.subtitle = encodeURIComponent(sendsubtitle);
	newobj.year = $('#speed').val();
	newobj.statistic = $('#radinput').val();
	newobj.outname = makeid();
	//output file name  ... makeid() is function creates random 5 letter filename

	$('#printspan').html('Processing...');

	$.get("http://dola.colorado.gov/gis-php/oilgas.php", newobj, function() {
		$('#printspan').html('DOWNLOAD');
		$('#uniform-printbtns').attr("onClick", "opmapwin('" + newobj.outname + "')");
	});

}

//resets print button
function opmapwin(outname) {
	window.open("http://dola.colorado.gov/tmp/" + outname + ".png");
	$('#printspan').html("Print Map");
	$('#uniform-printbtns').attr("onClick", "javascript:Clickhereformap('uniform-printbtns')");
}




//when everything is loaded, the application kicks off by starting the 'init' function (see near top of file)
dojo.ready(init); 